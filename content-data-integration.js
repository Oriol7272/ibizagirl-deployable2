// ============================
// CONTENT DATA INTEGRATION v4.1.0 COMPLETE
// Sistema de integraci√≥n multimedia modular para IbizaGirl.pics
// Conecta todos los m√≥dulos de contenido con la aplicaci√≥n principal
// ============================

'use strict';

// ============================
// VERIFICADOR DE CARGA DE M√ìDULOS
// ============================
class ContentModuleLoader {
    constructor() {
        this.loadedModules = new Set();
        this.requiredModules = [
            'content-data1.js',
            'content-data2.js', 
            'content-data3.js',
            'content-data4.js',
            'content-data5.js',
            'content-data6.js'
        ];
        this.loadAttempts = 0;
        this.maxAttempts = 3;
        this.isInitialized = false;
    }

    // Verificar qu√© m√≥dulos est√°n cargados
    checkLoadedModules() {
        const moduleStatus = {
            'content-data1.js': !!(window.ContentConfig && window.TimeUtils && window.ArrayUtils),
            'content-data2.js': !!(window.FULL_IMAGES_POOL && window.BannerTeaserManager),
            'content-data3.js': !!(window.PREMIUM_IMAGES_PART1 && window.PremiumContentPart1),
            'content-data4.js': !!(window.PREMIUM_IMAGES_PART2 && window.PremiumContentPart2),
            'content-data5.js': !!(window.PREMIUM_VIDEOS_POOL && window.VideoContentManager),
            'content-data6.js': !!(window.UnifiedContentAPI && window.ContentAPI)
        };

        console.log('üìä Estado de m√≥dulos de contenido:', moduleStatus);
        return moduleStatus;
    }

    // Cargar m√≥dulos faltantes din√°micamente
    async loadMissingModules() {
        const moduleStatus = this.checkLoadedModules();
        const missingModules = Object.entries(moduleStatus)
            .filter(([module, loaded]) => !loaded)
            .map(([module]) => module);

        if (missingModules.length === 0) {
            console.log('‚úÖ Todos los m√≥dulos de contenido est√°n cargados');
            return true;
        }

        console.log('‚ö†Ô∏è M√≥dulos faltantes:', missingModules);

        if (this.loadAttempts >= this.maxAttempts) {
            console.error('‚ùå No se pudieron cargar todos los m√≥dulos despu√©s de varios intentos');
            return false;
        }

        this.loadAttempts++;

        try {
            await Promise.all(
                missingModules.map(module => this.loadScript(module))
            );

            // Esperar un poco para que los m√≥dulos se inicialicen
            await new Promise(resolve => setTimeout(resolve, 500));

            // Verificar nuevamente
            return await this.loadMissingModules();

        } catch (error) {
            console.error('‚ùå Error cargando m√≥dulos:', error);
            return false;
        }
    }

    // Cargar un script individual
    loadScript(scriptName) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = scriptName;
            script.defer = true;
            script.onload = () => {
                console.log(`‚úÖ M√≥dulo cargado: ${scriptName}`);
                resolve();
            };
            script.onerror = () => {
                console.warn(`‚ö†Ô∏è No se pudo cargar: ${scriptName}`);
                resolve(); // No rechazar para permitir continuar
            };
            document.head.appendChild(script);
        });
    }

    // Inicializar sistema completo
    async initialize() {
        if (this.isInitialized) {
            return true;
        }

        console.log('üöÄ Inicializando sistema de contenido modular...');

        const success = await this.loadMissingModules();
        
        if (success) {
            // Verificar que la API unificada est√© disponible
            if (window.UnifiedContentAPI) {
                await window.UnifiedContentAPI.initialize();
            }

            this.isInitialized = true;
            console.log('‚úÖ Sistema de contenido modular inicializado correctamente');
            
            // Disparar evento de inicializaci√≥n completa
            window.dispatchEvent(new CustomEvent('contentSystemReady', {
                detail: {
                    modules: this.checkLoadedModules(),
                    timestamp: new Date().toISOString()
                }
            }));

            return true;
        } else {
            console.error('‚ùå No se pudo inicializar el sistema de contenido');
            return false;
        }
    }
}

// ============================
// INTEGRADOR DE CONTENIDO PARA MAIN-SCRIPT.JS
// ============================
class ContentIntegrator {
    constructor() {
        this.contentArrays = {
            photos: [],
            videos: [],
            banners: [],
            teasers: [],
            premiumPhotos: [],
            premiumVideos: []
        };
        this.initialized = false;
    }

    // Integrar todos los arrays de contenido
    integrateContent() {
        try {
            // Fotos p√∫blicas del pool completo
            if (window.FULL_IMAGES_POOL) {
                this.contentArrays.photos = [...window.FULL_IMAGES_POOL];
                console.log(`üì∏ Fotos p√∫blicas integradas: ${this.contentArrays.photos.length}`);
            }

            // Videos premium
            if (window.PREMIUM_VIDEOS_POOL) {
                this.contentArrays.videos = [...window.PREMIUM_VIDEOS_POOL];
                this.contentArrays.premiumVideos = [...window.PREMIUM_VIDEOS_POOL];
                console.log(`üé¨ Videos premium integrados: ${this.contentArrays.videos.length}`);
            }

            // Fotos premium (combinando parte 1 y parte 2)
            const premiumPart1 = window.PREMIUM_IMAGES_PART1 || [];
            const premiumPart2 = window.PREMIUM_IMAGES_PART2 || [];
            this.contentArrays.premiumPhotos = [...premiumPart1, ...premiumPart2];
            console.log(`üíé Fotos premium integradas: ${this.contentArrays.premiumPhotos.length}`);

            // Banners y teasers desde el gestor
            if (window.BannerTeaserManager) {
                this.contentArrays.banners = window.BannerTeaserManager.getBanners();
                this.contentArrays.teasers = window.BannerTeaserManager.getTeasers();
                console.log(`üéØ Banners: ${this.contentArrays.banners.length}, Teasers: ${this.contentArrays.teasers.length}`);
            }

            // Exponer arrays globalmente para compatibilidad con main-script.js
            this.exposeGlobalArrays();

            this.initialized = true;
            console.log('‚úÖ Integraci√≥n de contenido completada');
            return true;

        } catch (error) {
            console.error('‚ùå Error en integraci√≥n de contenido:', error);
            return false;
        }
    }

    // Exponer arrays globalmente
    exposeGlobalArrays() {
        // Para compatibilidad con main-script.js
        window.ALL_PHOTOS_POOL = this.contentArrays.photos;
        window.ALL_VIDEOS_POOL = this.contentArrays.videos;
        window.ALL_PREMIUM_PHOTOS = this.contentArrays.premiumPhotos;
        window.ALL_PREMIUM_VIDEOS = this.contentArrays.premiumVideos;
        
        // Tambi√©n mantener los nombres originales
        window.BANNER_IMAGES = this.contentArrays.banners;
        window.TEASER_IMAGES = this.contentArrays.teasers;

        console.log('üåê Arrays globales expuestos para main-script.js');
    }

    // Obtener estad√≠sticas del contenido
    getContentStats() {
        return {
            publicPhotos: this.contentArrays.photos.length,
            premiumPhotos: this.contentArrays.premiumPhotos.length,
            totalPhotos: this.contentArrays.photos.length + this.contentArrays.premiumPhotos.length,
            videos: this.contentArrays.videos.length,
            banners: this.contentArrays.banners.length,
            teasers: this.contentArrays.teasers.length,
            initialized: this.initialized
        };
    }
}

// ============================
// FUNCIONES DE UTILIDAD PARA MAIN-SCRIPT.JS
// ============================

// Funci√≥n auxiliar para obtener contenido aleatorio que usar√° main-script.js
function getRandomContentForMainScript() {
    if (!window.ContentAPI) {
        console.warn('‚ö†Ô∏è ContentAPI no disponible, usando fallback');
        return {
            photos: window.ALL_PHOTOS_POOL || [],
            videos: window.ALL_VIDEOS_POOL || [],
            banners: window.BANNER_IMAGES || [],
            teasers: window.TEASER_IMAGES || []
        };
    }

    return {
        photos: window.ContentAPI.getPublicImages(50),
        videos: window.ContentAPI.getVideos(20),
        banners: window.ContentAPI.getBanners(),
        teasers: window.ContentAPI.getTeasers()
    };
}

// Funci√≥n para generar rotaci√≥n diaria que usar√° main-script.js
function generateDailyRotationForMainScript() {
    if (window.UnifiedContentAPI && window.UnifiedContentAPI.initialized) {
        return window.UnifiedContentAPI.getTodaysContent();
    }

    // Fallback si la API unificada no est√° disponible
    const content = getRandomContentForMainScript();
    return {
        photos: content.photos,
        videos: content.videos,
        banners: content.banners,
        teasers: content.teasers,
        newPhotoIndices: new Set([0, 1, 2, 3, 4]),
        newVideoIndices: new Set([0, 1, 2]),
        lastUpdate: new Date(),
        stats: {
            totalPhotosPool: content.photos.length,
            totalVideosPool: content.videos.length,
            dailyPhotos: content.photos.length,
            dailyVideos: content.videos.length,
            newPhotos: 5,
            newVideos: 3
        }
    };
}

// ============================
// SISTEMA DE INICIALIZACI√ìN AUTOM√ÅTICA
// ============================
class AutoInitializer {
    constructor() {
        this.moduleLoader = new ContentModuleLoader();
        this.contentIntegrator = new ContentIntegrator();
        this.initializationAttempts = 0;
        this.maxInitAttempts = 5;
    }

    async initialize() {
        console.log('üéØ Iniciando auto-inicializaci√≥n del sistema de contenido...');

        try {
            // Paso 1: Cargar m√≥dulos
            const modulesLoaded = await this.moduleLoader.initialize();
            if (!modulesLoaded) {
                throw new Error('No se pudieron cargar todos los m√≥dulos');
            }

            // Paso 2: Integrar contenido
            const contentIntegrated = this.contentIntegrator.integrateContent();
            if (!contentIntegrated) {
                throw new Error('No se pudo integrar el contenido');
            }

            // Paso 3: Exponer funciones auxiliares globalmente
            this.exposeHelperFunctions();

            // Paso 4: Verificar compatibilidad con main-script.js
            this.verifyMainScriptCompatibility();

            console.log('üéâ Sistema de contenido inicializado exitosamente');
            console.log('üìä Estad√≠sticas:', this.contentIntegrator.getContentStats());

            return true;

        } catch (error) {
            this.initializationAttempts++;
            console.error(`‚ùå Error en inicializaci√≥n (intento ${this.initializationAttempts}):`, error);

            if (this.initializationAttempts < this.maxInitAttempts) {
                console.log(`üîÑ Reintentando inicializaci√≥n en 2 segundos...`);
                setTimeout(() => this.initialize(), 2000);
            } else {
                console.error('üí• No se pudo inicializar el sistema despu√©s de varios intentos');
                this.initializeFallbackMode();
            }

            return false;
        }
    }

    // Exponer funciones auxiliares globalmente
    exposeHelperFunctions() {
        window.getRandomContentForMainScript = getRandomContentForMainScript;
        window.generateDailyRotationForMainScript = generateDailyRotationForMainScript;
        window.getContentStats = () => this.contentIntegrator.getContentStats();
        
        console.log('üîó Funciones auxiliares expuestas globalmente');
    }

    // Verificar compatibilidad con main-script.js
    verifyMainScriptCompatibility() {
        const requiredGlobals = [
            'ALL_PHOTOS_POOL',
            'ALL_VIDEOS_POOL', 
            'BANNER_IMAGES',
            'TEASER_IMAGES'
        ];

        const missingGlobals = requiredGlobals.filter(global => !window[global]);

        if (missingGlobals.length > 0) {
            console.warn('‚ö†Ô∏è Variables globales faltantes para main-script.js:', missingGlobals);
            this.createFallbackGlobals();
        } else {
            console.log('‚úÖ Compatibilidad con main-script.js verificada');
        }
    }

    // Crear variables globales de fallback
    createFallbackGlobals() {
        if (!window.ALL_PHOTOS_POOL) {
            window.ALL_PHOTOS_POOL = [
                'full/bikini.webp',
                'full/bikini3.webp', 
                'full/bikini5.webp',
                'full/backbikini.webp',
                'full/bikbanner.webp',
                'full/bikbanner2.webp'
            ];
        }

        if (!window.ALL_VIDEOS_POOL) {
            window.ALL_VIDEOS_POOL = [];
        }

        if (!window.BANNER_IMAGES) {
            window.BANNER_IMAGES = ['bikini.webp', 'bikini3.webp'];
        }

        if (!window.TEASER_IMAGES) {
            window.TEASER_IMAGES = ['bikini.webp', 'bikini3.webp', 'bikini5.webp'];
        }

        console.log('üõ†Ô∏è Variables globales de fallback creadas');
    }

    // Modo fallback si todo falla
    initializeFallbackMode() {
        console.log('üÜò Iniciando modo fallback...');
        this.createFallbackGlobals();
        this.exposeHelperFunctions();

        // Disparar evento de fallback
        window.dispatchEvent(new CustomEvent('contentSystemFallback', {
            detail: {
                reason: 'Failed to load all modules',
                timestamp: new Date().toISOString()
            }
        }));
    }
}

// ============================
// INICIALIZACI√ìN AUTOM√ÅTICA
// ============================

const autoInitializer = new AutoInitializer();

// Inicializar cuando el DOM est√© listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        autoInitializer.initialize();
    });
} else {
    autoInitializer.initialize();
}

// Tambi√©n inicializar si se carga despu√©s del DOMContentLoaded
setTimeout(() => {
    if (!autoInitializer.contentIntegrator.initialized) {
        autoInitializer.initialize();
    }
}, 1000);

// ============================
// EXPORTS GLOBALES
// ============================

window.ContentModuleLoader = ContentModuleLoader;
window.ContentIntegrator = ContentIntegrator;
window.AutoInitializer = AutoInitializer;

console.log('üì¶ content-data-integration.js v4.1.0 cargado - Sistema de integraci√≥n listo');

// ============================
// DEBUGGING Y UTILIDADES DE DESARROLLO
// ============================

if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    window.debugContentSystem = function() {
        console.log('üîç DEBUG: Estado del sistema de contenido');
        console.table({
            'M√≥dulos cargados': autoInitializer.moduleLoader.checkLoadedModules(),
            'Estad√≠sticas': autoInitializer.contentIntegrator.getContentStats(),
            'Variables globales': {
                'ALL_PHOTOS_POOL': !!window.ALL_PHOTOS_POOL,
                'ALL_VIDEOS_POOL': !!window.ALL_VIDEOS_POOL,
                'ContentAPI': !!window.ContentAPI,
                'UnifiedContentAPI': !!window.UnifiedContentAPI
            }
        });
    };

    window.testContentIntegration = function() {
        console.log('üß™ TEST: Probando integraci√≥n de contenido');
        const randomContent = getRandomContentForMainScript();
        console.log('Contenido aleatorio:', randomContent);
        const dailyRotation = generateDailyRotationForMainScript();
        console.log('Rotaci√≥n diaria:', dailyRotation);
    };

    console.log('üõ†Ô∏è Funciones de debug disponibles: debugContentSystem(), testContentIntegration()');
}
