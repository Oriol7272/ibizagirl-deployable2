// =====================================================   
// twitter-bot-FIXED.js - Bot promocional para IbizaGirl.pics
// VERSI√ìN CORREGIDA CON RATE LIMITING Y MANEJO DE ERRORES 429
// =====================================================
  
const { TwitterApi } = require('twitter-api-v2');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: './twitter.env' });

// ‚ö†Ô∏è CONFIGURACI√ìN CON RATE LIMITING
const client = new TwitterApi({
  appKey: process.env.TWITTER_API_KEY,
  appSecret: process.env.TWITTER_API_SECRET,
  accessToken: process.env.TWITTER_ACCESS_TOKEN,
  accessSecret: process.env.TWITTER_ACCESS_SECRET,
});

// üõ°Ô∏è CONFIGURACI√ìN DE RATE LIMITING
const RATE_LIMITS = {
  TWEETS_PER_15_MIN: 10,    // L√≠mite conservador (real es 17)
  MIN_DELAY_BETWEEN_TWEETS: 180000,  // 3 minutos entre tweets
  RETRY_DELAYS: [60000, 300000, 600000], // 1min, 5min, 10min
  MAX_RETRIES: 3
};

// üìä TRACKING DE RATE LIMITS
let tweetCounter = 0;
let lastTweetTime = 0;
let errorCount = 0;

// Templates m√°s cortos (para evitar l√≠mites de caracteres)
const TWEET_TEMPLATES = [
  "üåä NEW UPDATE! 200+ fresh photos at ibizagirl.pics üèùÔ∏è Daily paradise content! üî•",
  "‚òÄÔ∏è Today's Mediterranean content is LIVE! üèñÔ∏è Fresh paradise photos ‚ú® ibizagirl.pics",
  "üé¨ FRESH DROP: 40 new beach videos + 200 HD photos! üå∫ ibizagirl.pics",
  "üíé VIP SPECIAL: ‚Ç¨100 lifetime or ‚Ç¨15/month! üåä 500+ photos daily! ibizagirl.pics",
  "üî• MEGA PACK -70% OFF! üéÅ Huge savings üí∞ ibizagirl.pics",
  "üèùÔ∏è Ibiza's hidden beaches! New content every morning üåÖ ibizagirl.pics",
  "‚ú® Fresh Mediterranean paradise! üåä Daily rotation! ibizagirl.pics",
  "üéØ Daily updates ‚úÖ 200+ photos ‚úÖ PayPal secure ‚úÖ ibizagirl.pics",
  "üå∫ Wake up to paradise! New Ibiza content üèñÔ∏è ibizagirl.pics"
];

const HASHTAG_POOLS = [
  ["#Ibiza", "#IbizaLife", "#Paradise"],
  ["#BeachLife", "#BeachVibes", "#OceanLife"],
  ["#Mediterranean", "#IslandLife", "#Spain"],
  ["#Premium", "#VIPAccess", "#DailyUpdates"]
];

// üîÑ FUNCI√ìN DE DELAY CON EXPONENTIAL BACKOFF
async function delay(ms) {
  console.log(`‚è∞ Esperando ${Math.round(ms/1000)}s antes del siguiente request...`);
  return new Promise(resolve => setTimeout(resolve, ms));
}

// üõ°Ô∏è VERIFICAR RATE LIMITS ANTES DE TWEET
function canTweet() {
  const now = Date.now();
  const timeSinceLastTweet = now - lastTweetTime;
  
  if (timeSinceLastTweet < RATE_LIMITS.MIN_DELAY_BETWEEN_TWEETS) {
    const waitTime = RATE_LIMITS.MIN_DELAY_BETWEEN_TWEETS - timeSinceLastTweet;
    console.log(`‚è≥ Esperando ${Math.round(waitTime/1000)}s por rate limiting...`);
    return false;
  }
  
  if (tweetCounter >= RATE_LIMITS.TWEETS_PER_15_MIN) {
    console.log('‚ö†Ô∏è L√≠mite de tweets alcanzado. Esperando reset...');
    return false;
  }
  
  return true;
}

// üîç OBTENER IMAGEN CORREGIDA (busca en el directorio correcto)
function getRandomImage() {
  // Buscar en el directorio correcto de la web
  const possiblePaths = [
    '../full/',
    './public/assets/full/',
    '../public/assets/full/',
    './full/',
    path.join(__dirname, '../full/'),
    path.join(__dirname, '../../../full/')
  ];
  
  for (const imagesDir of possiblePaths) {
    console.log(`üîç Buscando en: ${path.resolve(imagesDir)}`);
    
    if (!fs.existsSync(imagesDir)) {
      continue;
    }
    
    try {
      const files = fs.readdirSync(imagesDir);
      console.log(`üìã Archivos encontrados: ${files.length}`);
      
      // Buscar archivos de imagen (webp, jpg, jpeg, png)
      const imageFiles = files.filter(file => {
        const ext = path.extname(file).toLowerCase();
        return ['.webp', '.jpg', '.jpeg', '.png'].includes(ext);
      });
      
      console.log(`üì∏ Im√°genes encontradas: ${imageFiles.length}`);
      
      if (imageFiles.length > 0) {
        const randomIndex = Math.floor(Math.random() * imageFiles.length);
        const selectedImage = imageFiles[randomIndex];
        const fullPath = path.join(imagesDir, selectedImage);
        
        try {
          const stats = fs.statSync(fullPath);
          console.log(`‚úÖ Imagen seleccionada: ${selectedImage} (${Math.round(stats.size / 1024)}KB)`);
          return fullPath;
        } catch (error) {
          console.log(`‚ùå Error leyendo imagen: ${error.message}`);
        }
      }
      
    } catch (error) {
      console.log(`‚ùå Error en directorio: ${error.message}`);
    }
  }
  
  console.log('‚ùå No se encontraron im√°genes en ning√∫n directorio');
  return null;
}

// üìù GENERAR TWEET M√ÅS CORTO
function generateTweet() {
  const template = TWEET_TEMPLATES[Math.floor(Math.random() * TWEET_TEMPLATES.length)];
  const hashtagSet = HASHTAG_POOLS[Math.floor(Math.random() * HASHTAG_POOLS.length)];
  
  return `${template}\n\n${hashtagSet.join(" ")}`;
}

// üîê VERIFICAR CONEXI√ìN CON RETRY
async function verifyTwitterConnection(retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîç Intento de conexi√≥n ${attempt}/${retries}...`);
      await delay(2000); // 2 segundos entre intentos
      
      const user = await client.currentUser();
      console.log(`‚úÖ Conectado como: @${user.screen_name}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå Intento ${attempt} fallido:`, error.message);
      
      if (error.code === 429) {
        console.log('‚ö†Ô∏è Error 429 en verificaci√≥n - esperando 15 minutos...');
        await delay(900000); // 15 minutos
      } else if (attempt < retries) {
        await delay(5000); // 5 segundos antes del siguiente intento
      }
    }
  }
  
  return false;
}

// üì§ PUBLICAR TWEET CON MANEJO COMPLETO DE ERRORES
async function safeTweet(tweetData, description = "Tweet") {
  if (!canTweet()) {
    console.log('‚è∏Ô∏è Tweet cancelado por rate limiting');
    return null;
  }
  
  for (let attempt = 1; attempt <= RATE_LIMITS.MAX_RETRIES; attempt++) {
    try {
      console.log(`üì§ Publicando ${description} (intento ${attempt})...`);
      
      // Rate limiting preventivo
      await delay(3000);
      
      const result = await client.v2.tweet(tweetData);
      
      // ‚úÖ √âXITO
      console.log(`‚úÖ ${description} publicado exitosamente!`);
      console.log(`üîó https://twitter.com/i/status/${result.data.id}`);
      
      // Actualizar contadores
      lastTweetTime = Date.now();
      tweetCounter++;
      errorCount = 0;
      
      // Log
      logTweet(`[√âXITO] ${tweetData.text || tweetData}`);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå Error en intento ${attempt}:`, error.message);
      
      if (error.code === 429) {
        console.log('üö´ ERROR 429 - Rate limit excedido');
        const waitTime = RATE_LIMITS.RETRY_DELAYS[attempt - 1] || 600000;
        console.log(`‚è∞ Esperando ${waitTime/1000/60} minutos...`);
        await delay(waitTime);
        
      } else if (error.code === 403) {
        console.log('üö´ ERROR 403 - Contenido duplicado o prohibido');
        break; // No reintentar
        
      } else if (attempt < RATE_LIMITS.MAX_RETRIES) {
        await delay(30000); // 30 segundos
      }
      
      errorCount++;
    }
  }
  
  console.log(`‚ùå ${description} fall√≥ despu√©s de ${RATE_LIMITS.MAX_RETRIES} intentos`);
  return null;
}

// üì∏ TWEET CON IMAGEN SEGURO
async function tweetWithImageSafe() {
  console.log('\nüì∏ Preparando tweet con imagen...');
  
  const imagePath = getRandomImage();
  
  if (!imagePath) {
    console.log('‚ö†Ô∏è Sin im√°genes disponibles, publicando solo texto');
    return await tweetTextSafe();
  }
  
  try {
    // Subir imagen con retry
    console.log('üì§ Subiendo imagen a Twitter...');
    await delay(2000);
    
    const mediaUpload = await client.v1.uploadMedia(imagePath);
    console.log(`‚úÖ Imagen subida: ${mediaUpload}`);
    
    const tweetText = generateTweet();
    
    const tweetData = {
      text: tweetText,
      media: { media_ids: [mediaUpload] }
    };
    
    return await safeTweet(tweetData, "Tweet con imagen");
    
  } catch (error) {
    console.error('‚ùå Error subiendo imagen:', error.message);
    console.log('üîÑ Intentando tweet de texto...');
    return await tweetTextSafe();
  }
}

// üìù TWEET DE TEXTO SEGURO
async function tweetTextSafe() {
  console.log('\nüìù Preparando tweet de texto...');
  
  const tweetText = generateTweet();
  return await safeTweet(tweetText, "Tweet de texto");
}

// üìä RESETEAR CONTADORES CADA 15 MINUTOS
function resetRateLimitCounters() {
  tweetCounter = 0;
  console.log('üîÑ Contadores de rate limit reseteados');
}

// üìã LOG MEJORADO
function logTweet(content) {
  const timestamp = new Date().toISOString();
  const stats = `Tweets: ${tweetCounter}/${RATE_LIMITS.TWEETS_PER_15_MIN}, Errores: ${errorCount}`;
  const logEntry = `[${timestamp}] ${content}\nEstats: ${stats}\n${'='.repeat(50)}\n`;
  
  try {
    fs.appendFileSync('./logs/twitter-bot.log', logEntry);
  } catch (error) {
    console.error('‚ùå Error escribiendo log:', error.message);
  }
}

// üìä ESTAD√çSTICAS MEJORADAS
function showBotStats() {
  console.log('\nüìä ESTAD√çSTICAS DEL BOT');
  console.log('='.repeat(30));
  console.log(`‚è∞ Hora actual: ${new Date().toLocaleString('es-ES')}`);
  console.log(`üê¶ Tweets publicados: ${tweetCounter}/${RATE_LIMITS.TWEETS_PER_15_MIN}`);
  console.log(`‚ùå Errores consecutivos: ${errorCount}`);
  console.log(`üìù Templates disponibles: ${TWEET_TEMPLATES.length}`);
  console.log(`#Ô∏è‚É£ Sets de hashtags: ${HASHTAG_POOLS.length}`);
  console.log('\nüîí PROTECCI√ìN ANTI-429:');
  console.log(`‚Ä¢ L√≠mite: ${RATE_LIMITS.TWEETS_PER_15_MIN} tweets/15min`);
  console.log(`‚Ä¢ Delay m√≠nimo: ${RATE_LIMITS.MIN_DELAY_BETWEEN_TWEETS/1000}s`);
  console.log(`‚Ä¢ Reintentos: ${RATE_LIMITS.MAX_RETRIES}`);
  console.log('='.repeat(30));
}

// üöÄ INICIAR BOT CON PROTECCIONES
async function startBot() {
  console.log('‚ïê'.repeat(50));
  console.log('  üõ°Ô∏è IBIZAGIRL.PICS TWITTER BOT (SAFE MODE) üõ°Ô∏è  ');
  console.log('‚ïê'.repeat(50));
  
  // Crear directorio de logs
  if (!fs.existsSync('./logs')) {
    fs.mkdirSync('./logs');
  }
  
  console.log('\nüîê Verificando conexi√≥n a Twitter...');
  const connected = await verifyTwitterConnection();
  if (!connected) {
    console.error('‚ùå Error de conexi√≥n. Verifica credenciales.');
    process.exit(1);
  }
  
  showBotStats();
  
  // Reset de contadores cada 15 minutos
  setInterval(resetRateLimitCounters, 15 * 60 * 1000);
  
  console.log('\n‚úÖ Configurando trabajos SEGUROS...\n');
  
  // ‚è∞ PROGRAMACI√ìN MENOS AGRESIVA
  
  // Tweet con imagen cada 8 horas (3 tweets/d√≠a)
  cron.schedule('0 */8 * * *', () => {
    console.log('\nüì∏ Ejecutando tweet programado con imagen...');
    tweetWithImageSafe();
  });
  
  // Tweet de texto cada 12 horas (2 tweets/d√≠a)  
  cron.schedule('0 */12 * * *', () => {
    console.log('\nüìù Ejecutando tweet de texto programado...');
    tweetTextSafe();
  });
  
  // Tweet de actualizaci√≥n diaria a las 3:30 AM
  cron.schedule('30 3 * * *', async () => {
    console.log('\nüåÖ Tweet de actualizaci√≥n diaria...');
    const updateTweet = `üéâ DAILY UPDATE COMPLETE! üéâ\n\n‚ú® 200 new photos\nüé¨ 40 new videos\nüåä Fresh paradise content\n\nibizagirl.pics\n\n#DailyUpdate #Ibiza #Paradise`;
    await safeTweet(updateTweet, "Actualizaci√≥n diaria");
  });
  
  console.log('\nüöÄ Publicando tweet inicial (despu√©s de 10 segundos)...');
  setTimeout(async () => {
    await tweetWithImageSafe();
  }, 10000);
  
  console.log('\n‚úÖ Bot SEGURO funcionando. Presiona Ctrl+C para detener.\n');
}

// üõë MANEJO DE CIERRE
process.on('SIGINT', () => {
  console.log('\n\nüõë Deteniendo bot seguramente...');
  console.log(`üìä Stats finales: ${tweetCounter} tweets publicados, ${errorCount} errores`);
  console.log('‚úÖ Bot detenido');
  process.exit(0);
});

// üöÄ INICIAR
startBot().catch(error => {
  console.error('‚ùå Error fatal:', error);
  process.exit(1);
});