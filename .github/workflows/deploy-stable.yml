name: deploy-stable
on:
  push:
    branches: [stable]
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      EXPECTED_USER: oriolcabre-5364
      VERCEL_ORG_SLUG: oriols-projects-ed6b9b04
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      DOMAIN_A: ibizagirl.pics
      DOMAIN_W: www.ibizagirl.pics
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
          cache: npm
      - run: npm i -g vercel@latest
      - name: Sanity token
        run: |
          test -n "$VERCEL_TOKEN" || { echo "VERCEL_TOKEN vacÃ­o"; exit 1; }
          echo "len(VERCEL_TOKEN)=${#VERCEL_TOKEN}"
      - name: Write Vercel auth
        run: |
          mkdir -p "$HOME/.vercel"
          printf '{"token":"%s"}\n' "$VERCEL_TOKEN" > "$HOME/.vercel/auth.json"
      - name: Whoami
        run: |
          U=$(vercel whoami --token "$VERCEL_TOKEN" 2>/dev/null | tr -d '\r')
          echo "whoami=$U"
          [ -n "$U" ] || { echo "Sin whoami"; exit 1; }
          [ "$U" = "$EXPECTED_USER" ] || { echo "Token NO es de $EXPECTED_USER"; exit 1; }
      - name: Link by IDs
        run: |
          mkdir -p .vercel
          printf '{"orgId":"%s","projectId":"%s"}\n' "$VERCEL_ORG_ID" "$VERCEL_PROJECT_ID" > .vercel/project.json
          cat .vercel/project.json
      - name: Pull env (prod)
        run: vercel env pull --yes --environment=production --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" || true
      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm install --no-audit --no-fund
          elif [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm && (pnpm i --frozen-lockfile || pnpm i)
          elif [ -f yarn.lock ]; then
            corepack enable && (yarn install --frozen-lockfile || yarn install)
          else
            npm install --no-audit --no-fund
          fi
      - name: Deploy (prod)
        id: deploy
        run: |
          URL=$(vercel deploy --prod --yes --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" | awk '/https:\/\/.*\.vercel\.app/ {print $1; exit}')
          [ -n "$URL" ] || { echo "No obtuve URL de deploy"; exit 1; }
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Deploy URL: $URL"
      - name: Alias domains
        if: steps.deploy.outputs.url != ''
        run: |
          vercel alias set "${{ steps.deploy.outputs.url }}" "$DOMAIN_A" --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" || true
          vercel alias set "${{ steps.deploy.outputs.url }}" "$DOMAIN_W" --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" || true
      - name: Tag release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TS=$(date +'%Y%m%d-%H%M%S'); TAG="stable-$TS"
          git tag -a "$TAG" -m "Deploy stable @ $TS"
          git push origin "$TAG"
