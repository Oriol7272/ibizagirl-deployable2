name: Deploy stable to Production

on:
  push: { branches: [ stable ] }
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      EXPECTED_USER: oriolcabre-5364
      VERCEL_ORG_SLUG: oriols-projects-ed6b9b04
      DOMAIN_A: ibizagirl.pics
      DOMAIN_W: www.ibizagirl.pics
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup git identity (para tag)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Use Node 20.11.1 + cache npm
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
          cache: npm

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Write Vercel auth.json
        run: |
          mkdir -p "$HOME/.vercel"
          printf '{"token":"%s"}\n' "$VERCEL_TOKEN" > "$HOME/.vercel/auth.json"

      - name: Vercel whoami (validación estricta)
        run: |
          U=$(vercel whoami --token "$VERCEL_TOKEN" 2>/dev/null | tail -n1 | tr -d '\r')
          echo "whoami=$U"
          if [ -z "$U" ]; then echo "No se pudo obtener whoami"; exit 1; fi
          if [ "$U" != "$EXPECTED_USER" ]; then echo "Token no pertenece a $EXPECTED_USER"; exit 1; fi

      - name: Vincular proyecto por IDs (sin interacción)
        run: |
          mkdir -p .vercel
          printf '{"orgId":"%s","projectId":"%s"}\n' "$VERCEL_ORG_ID" "$VERCEL_PROJECT_ID" > .vercel/project.json
          cat .vercel/project.json

      - name: Pull env (production, no bloqueante)
        run: vercel env pull --yes --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" || true

      - name: Install deps (lockfile aware)
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm install --no-audit --no-fund
          elif [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm && (pnpm i --frozen-lockfile || pnpm i)
          elif [ -f yarn.lock ]; then
            corepack enable && (yarn install --frozen-lockfile || yarn install)
          else
            npm install --no-audit --no-fund
          fi

      - name: Build prebuilt (Vercel)
        run: vercel build --prod --yes --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN"

      - name: Deploy prebuilt → Production
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod --yes --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" \
            | awk '/https:\/\/.*\.vercel\.app/ {print $1; exit}')
          [ -n "$URL" ] || { echo "No obtuve URL de deploy"; exit 1; }
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Deploy URL: $URL"

      - name: Alias domains (non-blocking)
        if: steps.deploy.outputs.url != ''
        run: |
          vercel alias set "${{ steps.deploy.outputs.url }}" "${{ env.DOMAIN_A }}" --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" || true
          vercel alias set "${{ steps.deploy.outputs.url }}" "${{ env.DOMAIN_W }}" --scope "$VERCEL_ORG_SLUG" --token "$VERCEL_TOKEN" || true

      - name: Tag & Release
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          TS=$(date +'%Y%m%d-%H%M%S'); TAG="rel-$TS"
          git tag -a "$TAG" -m "Production deploy from stable @ $TS"
          git push origin "$TAG"
