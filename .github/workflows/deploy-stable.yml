name: Deploy stable to Production

on:
  push:
    branches: [ stable ]
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      NODE_VERSION: 20.11.1
      DOMAIN_A: ibizagirl.pics
      DOMAIN_W: www.ibizagirl.pics

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Setup Vercel auth (non-interactive)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          mkdir -p "$HOME/.vercel"
          printf '{"token":"%s"}' "$VERCEL_TOKEN" > "$HOME/.vercel/auth.json"
          chmod 600 "$HOME/.vercel/auth.json"

      - name: Link project via secrets
        run: |
          mkdir -p .vercel
          printf '{"orgId":"%s","projectId":"%s"}' "$VERCEL_ORG_ID" "$VERCEL_PROJECT_ID" > .vercel/project.json
          echo "Linked:"; cat .vercel/project.json

      - name: Pull env (production, non-blocking)
        continue-on-error: true
        run: vercel env pull .env.production.local --environment=production || true

      - name: Debug whoami / projects (non-blocking)
        continue-on-error: true
        run: |
          vercel --version
          vercel whoami || true
          vercel projects ls --scope "oriols-projects-ed6b9b04" | head -n 50 || true

      - name: Install deps (lockfile aware)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm && pnpm i --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable && yarn install --frozen-lockfile
          else
            npm i
          fi

      - name: Build prebuilt (Vercel)
        run: vercel build --prod

      - name: Deploy prebuilt â†’ Production
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod | awk '/https:\/\/.*\.vercel\.app/ {print $1; exit}')
          if [ -z "$URL" ]; then
            echo "No se obtuvo URL de deploy" >&2
            exit 1
          fi
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Deploy URL: $URL"

      - name: Alias domains (non-blocking)
        if: steps.deploy.outputs.url != ''
        run: |
          vercel alias set "${{ steps.deploy.outputs.url }}" "${{ env.DOMAIN_A }}" || true
          vercel alias set "${{ steps.deploy.outputs.url }}" "${{ env.DOMAIN_W }}" || true

      - name: Tag & Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TS=$(date +'%Y%m%d-%H%M%S')
          TAG="rel-${TS}"
          git tag -a "$TAG" -m "Production deploy from stable @ ${TS}"
          git push origin "$TAG"
