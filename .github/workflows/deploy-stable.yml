name: deploy-stable
on:
  push:
    branches: [stable]
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      DOMAIN_A: ibizagirl.pics
      DOMAIN_W: www.ibizagirl.pics
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
          cache: npm

      - name: Check VERCEL_TOKEN
        run: |
          if [ -z "$VERCEL_TOKEN" ] || [ "${#VERCEL_TOKEN}" -lt 20 ]; then
            echo "::error::VERCEL_TOKEN vacío o demasiado corto (${#VERCEL_TOKEN} chars). Define el secret en GitHub → Settings → Secrets → Actions."
            exit 1
          fi

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Auth & use linked project.json
        run: |
          mkdir -p "$HOME/.vercel"
          printf '{"token":"%s"}\n' "$VERCEL_TOKEN" > "$HOME/.vercel/auth.json"
          test -f .vercel/project.json || { echo "::error::.vercel/project.json no existe. Ejecuta 'vercel link' en local y commitea ese archivo."; exit 1; }

      - name: Pull env (production) — best effort
        run: vercel env pull --yes --environment=production || true

      - name: Install deps (if any)
        run: |
          if [ -f package-lock.json ]; then
            npm ci || npm install --no-audit --no-fund
          elif [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm && (pnpm i --frozen-lockfile || pnpm i)
          elif [ -f yarn.lock ]; then
            corepack enable && (yarn install --frozen-lockfile || yarn install)
          else
            echo "No lockfile; skipping heavy installs."
          fi

      - name: Deploy to Production (cloud build)
        id: deploy
        run: |
          URL=$(vercel deploy --prod --yes | awk '/https:\/\/.*\.vercel\.app/ {print $1; exit}')
          [ -n "$URL" ] || { echo "::error::No obtuve URL de deploy"; exit 1; }
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Deploy URL: $URL"

      - name: Alias domains (best-effort)
        if: steps.deploy.outputs.url != ''
        run: |
          vercel alias set "${{ steps.deploy.outputs.url }}" "$DOMAIN_A" || true
          vercel alias set "${{ steps.deploy.outputs.url }}" "$DOMAIN_W" || true

      - name: Tag release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TS=$(date +'%Y%m%d-%H%M%S'); TAG="stable-$TS"
          git tag -a "$TAG" -m "Deploy stable @ $TS"
          git push origin "$TAG"
